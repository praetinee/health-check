import streamlit as st
import pandas as pd
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials

# ===============================
# PAGE CONFIG + FONTS
# ===============================
st.set_page_config(page_title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun&display=swap');
    html, body, [class*="css"] {
        font-family: 'Sarabun', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ===============================
# LOAD GOOGLE SHEETS
# ===============================
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
spreadsheet = client.open_by_url(sheet_url)
worksheet = spreadsheet.sheet1
df = pd.DataFrame(worksheet.get_all_records())

# Clean column names
df.columns = df.columns.str.strip()
df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str)
df['HN'] = df['HN'].astype(str)
df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str)

# ===============================
# SEARCH FORM (unchanged)
# ===============================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form(key="search_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        citizen_id = st.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô", max_chars=13, placeholder="‡πÄ‡∏ä‡πà‡∏ô 1234567890123")
    with col2:
        hn = st.text_input("HN", placeholder="‡πÄ‡∏ä‡πà‡∏ô 123456")
    with col3:
        full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ")
    submitted = st.form_submit_button("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")

if submitted:
    matched = df[
        (df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == citizen_id.strip()) |
        (df["HN"] == hn.strip()) |
        (df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip())
    ]

    if matched.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        person = matched.iloc[0]
        st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}")
        st.markdown(f"**HN:** {person.get('HN', '-')}  ")
        st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:** {person.get('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', '-')}  ")
        st.markdown(f"**‡πÄ‡∏û‡∏®:** {person.get('‡πÄ‡∏û‡∏®', '-')}")

        # ===============================
        # YEAR SELECTION
        # ===============================
        year_map = {"2561": "61", "2562": "62", "2563": "63", "2564": "64", "2565": "65", "2566": "66", "2567": "67", "2568": "68"}
        selected_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", list(year_map.keys()), index=7)
        y = year_map[selected_year]

        def safe_get(field):
            return person.get(f"{field}{y}", "-")

        weight = safe_get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")
        height = safe_get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á")
        waist = safe_get("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß")
        sbp = safe_get("SBP")
        dbp = safe_get("DBP")
        pulse = safe_get("pulse")

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
        try:
            bmi = round(float(weight) / ((float(height)/100)**2), 1)
        except:
            bmi = "-"

        if isinstance(bmi, float):
            if bmi > 30:
                bmi_result = "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
            elif bmi >= 25:
                bmi_result = "‡∏≠‡πâ‡∏ß‡∏ô"
            elif bmi >= 23:
                bmi_result = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
            elif bmi >= 18.5:
                bmi_result = "‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                bmi_result = "‡∏ú‡∏≠‡∏°"
        else:
            bmi_result = "-"

        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï
        try:
            sbp_f, dbp_f = float(sbp), float(dbp)
            if sbp_f == 0 or dbp_f == 0:
                bp_result = "-"
            elif sbp_f >= 160 or dbp_f >= 100:
                bp_result = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á"
            elif sbp_f >= 140 or dbp_f >= 90:
                bp_result = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif sbp_f < 120 and dbp_f < 80:
                bp_result = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                bp_result = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        except:
            bp_result = "-"

        # ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß
        try:
            waist = float(waist)
            gender = person.get("‡πÄ‡∏û‡∏®", "")
            waist_threshold = 90 if gender == "‡∏ä‡∏≤‡∏¢" else 80
            waist_result = "‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if waist > waist_threshold else "‡∏õ‡∏Å‡∏ï‡∏¥"
        except:
            waist_result = "-"

        # ===============================
        # DISPLAY SUMMARY
        # ===============================
        st.markdown("### üìã ‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏µ " + selected_year)
        summary = pd.DataFrame({
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": ["‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)", "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)", "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)", "BMI", "‡πÅ‡∏õ‡∏•‡∏ú‡∏• BMI", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)", "‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡∏ä‡∏µ‡∏û‡∏à‡∏£ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ)", "‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß"],
            "‡∏Ñ‡πà‡∏≤": [weight, height, waist, bmi, bmi_result, f"{sbp}/{dbp}", bp_result, pulse, waist_result]
        })
        st.dataframe(summary.set_index("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"), use_container_width=True)

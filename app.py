import streamlit as st
import pandas as pd
import gspread
import json
import matplotlib.pyplot as plt
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun&display=swap');
    html, body, [class*="css"] {
        font-family: 'Sarabun', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ===============================
# LOAD GOOGLE SHEETS
# ===============================
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
spreadsheet = client.open_by_url(sheet_url)
worksheet = spreadsheet.sheet1
df = pd.DataFrame(worksheet.get_all_records())
df.columns = df.columns.str.strip()

required_columns = ['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', 'HN', '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•']
if not all(col in df.columns for col in required_columns):
    st.error("‚ùå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheet")
    st.stop()

df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str)
df['HN'] = df['HN'].astype(str)
df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str)

# ===============================
# FUNCTIONS
# ===============================
def calc_bmi(weight, height):
    try:
        weight = float(weight)
        height = float(height)
        return round(weight / ((height / 100) ** 2), 1)
    except (ValueError, TypeError):
        return None

def interpret_bmi(bmi):
    if bmi is None:
        return "-"
    if bmi > 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
    elif bmi >= 25:
        return "‡∏≠‡πâ‡∏ß‡∏ô"
    elif bmi >= 23:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
    elif bmi >= 18.5:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    else:
        return "‡∏ú‡∏≠‡∏°"

def interpret_bp(sbp, dbp):
    try:
        sbp = float(sbp)
        dbp = float(dbp)
        if sbp == 0 or dbp == 0:
            return "-"
        if sbp >= 160 or dbp >= 100:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á"
        elif sbp >= 140 or dbp >= 90:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif sbp < 120 and dbp < 80:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
    except (ValueError, TypeError):
        return "-"

def assess_waist(waist):
    try:
        waist = float(waist)
        return "‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if waist > 90 else "‡∏õ‡∏Å‡∏ï‡∏¥"
    except (ValueError, TypeError):
        return "-"

# ===============================
# HEADER & FORM
# ===============================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        id_card = st.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    with col2:
        hn = st.text_input("HN")
    with col3:
        full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")

if submitted:
    query = df.copy()

    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        query = query[query["HN"] == hn.strip()]
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]

    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    elif len(query) > 1:
        st.warning("üîé ‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô")
        st.dataframe(query)
        st.stop()
    else:
        st.session_state["person_records"] = query

# ===============================
# DISPLAY RESULTS
# ===============================
if "person_records" in st.session_state:
    person_df = st.session_state["person_records"]
    person_info = person_df.iloc[0]

    # Header line
    line_info = f"""
    ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á: **{person_info.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}**  
    üÜî {person_info.get('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', '-')} | HN: {person_info.get('HN', '-')} | ‡πÄ‡∏û‡∏®: {person_info.get('‡πÄ‡∏û‡∏®', '-')}
    """
    st.markdown(line_info)

    # Health info by year
    st.markdown("### üìä ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á / ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß")

    if "‡∏õ‡∏µ" not in person_df.columns:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏õ‡∏µ' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheet ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏µ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    else:
        person_df = person_df.sort_values(by="‡∏õ‡∏µ", ascending=False)
        for _, row in person_df.iterrows():
            year = int(row.get("‡∏õ‡∏µ", 0))
            weight = row.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")
            height = row.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á")
            waist = row.get("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß")
            sbp = row.get("SBP", 0)
            dbp = row.get("DBP", 0)
            pulse = row.get("‡∏ä‡∏µ‡∏û‡∏à‡∏£", "-")
            bmi = calc_bmi(weight, height)

            st.markdown(f"#### üóì ‡∏õ‡∏µ {year + 543}")
            st.write(f"- ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {weight} ‡∏Å‡∏Å.")
            st.write(f"- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á: {height} ‡∏ã‡∏°.")
            st.write(f"- ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß: {waist} ‡∏ã‡∏°. ({assess_waist(waist)})")
            st.write(f"- BMI: {bmi} ({interpret_bmi(bmi)})")
            st.write(f"- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {sbp}/{dbp} mmHg ({interpret_bp(sbp, dbp)})")
            st.write(f"- ‡∏ä‡∏µ‡∏û‡∏à‡∏£: {pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ")

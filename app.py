import numpy as np
import streamlit as st
import pandas as pd
import gspread
import json
import matplotlib.pyplot as plt
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap');

    html, body, [class*="css"] {
        font-family: 'Chakra Petch', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ===============================
# CONNECT GOOGLE SHEET (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô sheet ‡πÅ‡∏£‡∏Å)
# ===============================
try:
    service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
    client = gspread.authorize(creds)

    sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
    worksheet = client.open_by_url(sheet_url).sheet1  # ‚úÖ sheet ‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏°‡∏≠

    raw_data = worksheet.get_all_records()  # ‚úÖ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if not raw_data:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á Google Sheet")
        st.stop()

    df = pd.DataFrame(raw_data)

    # ‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    df.columns = df.columns.str.strip()
    df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip()
    df['HN'] = df['HN'].astype(str).str.strip()
    df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip()

except Exception as e:
    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Google Sheet: {e}")
    st.stop()
    
# ===============================
# YEAR MAPPING
# ===============================
years = list(range(61, 69))
columns_by_year = {
    year: {
        "weight": f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{year}" if year != 68 else "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "height": f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{year}" if year != 68 else "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "waist": f"‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß{year}" if year != 68 else "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "sbp": f"SBP{year}" if year != 68 else "SBP",
        "dbp": f"DBP{year}" if year != 68 else "DBP",
        "pulse": f"pulse{year}" if year != 68 else "pulse",
        "bmi_value": f"BMI{year}" if year != 68 else "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢",
    }
    for year in years
}

# ===============================
# FUNCTIONS
# ===============================
def interpret_bmi(bmi):
    if bmi is None or bmi == "":
        return "-"
    try:
        bmi = float(bmi)
        if bmi > 30:
            return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
        elif bmi >= 25:
            return "‡∏≠‡πâ‡∏ß‡∏ô"
        elif bmi >= 23:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
        elif bmi >= 18.5:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏ú‡∏≠‡∏°"
    except:
        return "-"

def interpret_waist(waist, height):
    try:
        waist = float(waist)
        height = float(height)
        return "‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if waist > height else "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return "-"

def interpret_bp(sbp, dbp):
    try:
        sbp = float(sbp)
        dbp = float(dbp)
        if sbp == 0 or dbp == 0:
            return "-"
        if sbp >= 160 or dbp >= 100:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
        elif sbp >= 140 or dbp >= 90:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif sbp < 120 and dbp < 80:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
    except:
        return "-"

# ===============================
# UI SEARCH
# ===============================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")  # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!

# ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å form ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
if submitted:
    query = df.copy()
    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        query = query[query["HN"] == hn.strip()]
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]

    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        st.session_state["person"] = query.iloc[0]

# ===============================
# DISPLAY
# ===============================
if "person" in st.session_state:
    person = st.session_state["person"]

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ñ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
    # ‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ error
    st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á: {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}")

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ / HN / ‡πÄ‡∏û‡∏® ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠ contrast ‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏°)
    st.markdown(f"""
    <p style='color: white; font-size: 16px; line-height: 1.6;'>
    ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: {person.get('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', '-')}<br>
    HN: {person.get('HN', '-')}<br>
    ‡πÄ‡∏û‡∏®: {person.get('‡πÄ‡∏û‡∏®', '-')}
    </p>
    """, unsafe_allow_html=True)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    table_data = {
        "‡∏õ‡∏µ ‡∏û.‡∏®.": [],
        "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)": [],
        "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)": [],  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)": [],
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)": [],
        "BMI (‡πÅ‡∏õ‡∏•‡∏ú‡∏•)": []
    }


    for y in sorted(years):
        cols = columns_by_year[y]  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
        weight = person.get(cols["weight"], "")
        height = person.get(cols["height"], "")
        waist = person.get(cols["waist"], "")
        sbp = person.get(cols["sbp"], "")
        dbp = person.get(cols["dbp"], "")

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á
        try:
            bmi_val = float(weight) / ((float(height) / 100) ** 2)
            bmi_val = round(bmi_val, 1)
            bmi_str = f"{bmi_val}<br><span style='font-size: 13px; color: gray;'>{interpret_bmi(bmi_val)}</span>"
        except:
            bmi_val = None
            bmi_str = "-"

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô
        try:
            if sbp or dbp:
                bp_val = f"{sbp}/{dbp}"
                bp_meaning = interpret_bp(sbp, dbp)
                bp_str = f"{bp_val}<br><span style='font-size: 13px; color: gray;'>{bp_meaning}</span>"
            else:
                bp_str = "-"
        except:
            bp_str = "-"

        # ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        table_data["‡∏õ‡∏µ ‡∏û.‡∏®."].append(y + 2500)
        table_data["‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)"].append(weight if weight else "-")
        table_data["‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)"].append(height if height else "-")
        table_data["‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)"].append(waist if waist else "-")
        table_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)"].append(bp_str)
        table_data["BMI (‡πÅ‡∏õ‡∏•‡∏ú‡∏•)"].append(bmi_str)

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HTML <br> ‡∏î‡πâ‡∏ß‡∏¢ unsafe_allow_html)
    st.markdown("### üìä ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô")
    html_table = pd.DataFrame(table_data).set_index("‡∏õ‡∏µ ‡∏û.‡∏®.").T.to_html(escape=False)
    st.markdown(html_table, unsafe_allow_html=True)

    # ==========================
    # GRAPH: BMI History
    # ==========================

    bmi_data = []
    labels = []

    for y in sorted(years):
        cols = columns_by_year[y]  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!

        weight = person.get(cols["weight"], "")
        height = person.get(cols["height"], "")

        try:
            weight = float(weight)
            height = float(height)
            if weight > 0 and height > 0:
                bmi_val = round(weight / ((height / 100) ** 2), 1)
                bmi_data.append(bmi_val)
                labels.append(f"B.E. {y + 2500}")
        except:
            continue

    if bmi_data and labels:
        st.markdown("### üìà BMI Trend")
        fig, ax = plt.subplots(figsize=(10, 4))
        
        ax.axhspan(30, 40, facecolor='#D32F2F', alpha=0.3, label='Severely Obese')
        ax.axhspan(25, 30, facecolor='#FF5722', alpha=0.3, label='Obese')
        ax.axhspan(23, 25, facecolor='#FF9900', alpha=0.3, label='Overweight')
        ax.axhspan(18.5, 23, facecolor='#109618', alpha=0.3, label='Normal')
        ax.axhspan(0, 18.5, facecolor='#3366CC', alpha=0.3, label='Underweight')

        ax.plot(np.arange(len(labels)), bmi_data, marker='o', color='black', linewidth=2, label='BMI')
        ax.set_xticks(np.arange(len(labels)))
        ax.set_xticklabels(labels)
        ax.set_ylabel("BMI", fontsize=12)
        ax.set_ylim(15, 40)
        ax.set_title("BMI Over Time", fontsize=14)
        ax.legend(loc="upper left")

        st.pyplot(fig)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")

    # ===============================
    # DISPLAY: URINE TEST (‡∏õ‡∏µ 2561‚Äì2568)
    # ===============================
    
    def interpret_alb(value):
        if value == "":
            return "-"
        if value.lower() == "negative":
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö"
        elif value in ["trace", "1+", "2+"]:
            return "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif value == "3+":
            return "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
        return "-"
    
    def interpret_sugar(value):
        if value == "":
            return "-"
        if value.lower() == "negative":
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö"
        elif value == "trace":
            return "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif value in ["1+", "2+", "3+", "4+", "5+", "6+"]:
            return "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
        return "-"
    
    def interpret_rbc(value):
        if value == "":
            return "-"
        if value in ["0-1", "negative", "1-2", "2-3", "3-5"]:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        elif value in ["5-10", "10-20"]:
            return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
    
    def interpret_wbc(value):
        if value == "":
            return "-"
        if value in ["0-1", "negative", "1-2", "2-3", "3-5"]:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        elif value in ["5-10", "10-20"]:
            return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
    
    def summarize_urine(*results):
        if all(
            r in ["-", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÑ‡∏°‡πà‡∏û‡∏ö", "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"]
            for r in results
        ):
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        if any("‡∏û‡∏ö" in r and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in r for r in results):
            return "‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
        if any("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in r or "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß" in r for r in results if "‡∏õ‡∏Å‡∏ï‡∏¥" not in r):
            return "‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
        return "-"
    
    def advice_urine(sex, alb, sugar, rbc, wbc):
        alb_text = interpret_alb(alb)
        sugar_text = interpret_sugar(sugar)
        rbc_text = interpret_rbc(rbc)
        wbc_text = interpret_wbc(wbc)
    
        if all(r in ["-", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÑ‡∏°‡πà‡∏û‡∏ö", "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"]
               for r in [alb_text, sugar_text, rbc_text, wbc_text]):
            return "‡∏ú‡∏•‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
    
        if "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞" in sugar_text and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in sugar_text:
            return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
    
        if sex == "‡∏´‡∏ç‡∏¥‡∏á" and "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in rbc_text and "‡∏õ‡∏Å‡∏ï‡∏¥" in wbc_text:
            return "‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
    
        if sex == "‡∏ä‡∏≤‡∏¢" and "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in rbc_text and "‡∏õ‡∏Å‡∏ï‡∏¥" in wbc_text:
            return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
    
        if "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞" in wbc_text and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in wbc_text:
            return "‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
    
        return "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•"
    
    # ===============================
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    # ===============================
    sex = person.get("‡πÄ‡∏û‡∏®", "")
    advice_latest = "-"
    urine_table = {
        "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô": [],
        "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•": [],
        "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á": [],
        "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß": [],
        "‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ": []
    }
    
    for y in years:
        y_label = str(y) if y != 68 else ""
        y_be = y + 2500
    
        alb_col = f"Alb{y_label}"
        sugar_col = f"sugar{y_label}"
        rbc_col = f"RBC1{y_label}"
        wbc_col = f"WBC1{y_label}"
        summary_col = f"‡∏ú‡∏•‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞{y_label}" if y != 68 else None
    
        alb_raw = person.get(alb_col, "").strip()
        sugar_raw = person.get(sugar_col, "").strip()
        rbc_raw = person.get(rbc_col, "").strip()
        wbc_raw = person.get(wbc_col, "").strip()
    
        alb = f"{alb_raw}<br><span style='font-size:13px;color:gray;'>{interpret_alb(alb_raw)}</span>" if alb_raw else "-"
        sugar = f"{sugar_raw}<br><span style='font-size:13px;color:gray;'>{interpret_sugar(sugar_raw)}</span>" if sugar_raw else "-"
        rbc = f"{rbc_raw}<br><span style='font-size:13px;color:gray;'>{interpret_rbc(rbc_raw)}</span>" if rbc_raw else "-"
        wbc = f"{wbc_raw}<br><span style='font-size:13px;color:gray;'>{interpret_wbc(wbc_raw)}</span>" if wbc_raw else "-"
    
        if y != 68:
            summary = person.get(summary_col, "").strip() or "-"
            summary = "‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" if "‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" in summary else ("‡∏õ‡∏Å‡∏ï‡∏¥" if "‡∏õ‡∏Å‡∏ï‡∏¥" in summary else "-")
        else:
            summary = summarize_urine(
                interpret_alb(alb_raw),
                interpret_sugar(sugar_raw),
                interpret_rbc(rbc_raw),
                interpret_wbc(wbc_raw)
            )
            advice_latest = advice_urine(sex, alb_raw, sugar_raw, rbc_raw, wbc_raw)
    
        urine_table["‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô"].append(alb)
        urine_table["‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•"].append(sugar)
        urine_table["‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á"].append(rbc)
        urine_table["‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß"].append(wbc)
        urine_table["‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ"].append(summary)
    
    # ===============================
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    # ===============================
    st.markdown("### üöΩ ‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ (‡∏õ‡∏µ 2561‚Äì2568)")
    urine_df = pd.DataFrame.from_dict(urine_table, orient="index", columns=[y + 2500 for y in years])
    st.markdown(urine_df.to_html(escape=False), unsafe_allow_html=True)
    
    # ===============================
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    # ===============================
    latest_year_be = max(years) + 2500
    if advice_latest and advice_latest != "-":
        st.warning(
            f"<div style='font-size:14px; font-weight:600;'>üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏õ‡∏µ {latest_year_be}</div>"
            f"<div style='font-size:13px;'>{advice_latest}</div>",
            icon="‚ÑπÔ∏è"
        )




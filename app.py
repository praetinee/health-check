import streamlit as st
import pandas as pd
import gspread
import json
import re
import matplotlib.pyplot as plt
from oauth2client.service_account import ServiceAccountCredentials

# ===============================
# PAGE CONFIG + FONTS
# ===============================
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun&display=swap');
    html, body, [class*="css"] {
        font-family: 'Sarabun', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ===============================
# LOAD GOOGLE SHEETS
# ===============================
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
spreadsheet = client.open_by_url(sheet_url)
worksheet = spreadsheet.sheet1
df = pd.DataFrame(worksheet.get_all_records())
df.columns = df.columns.str.strip()
df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str)
df['HN'] = df['HN'].astype(str)
df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str)

# ===============================
# FUNCTIONS
# ===============================
def calc_bmi(weight, height):
    try:
        weight = float(weight)
        height = float(height)
        return round(weight / ((height / 100) ** 2), 1)
    except:
        return None

def interpret_bmi(bmi):
    if bmi is None:
        return "-"
    if bmi > 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
    elif bmi >= 25:
        return "‡∏≠‡πâ‡∏ß‡∏ô"
    elif bmi >= 23:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
    elif bmi >= 18.5:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    else:
        return "‡∏ú‡∏≠‡∏°"

def interpret_bp(sbp, dbp):
    try:
        sbp = float(sbp)
        dbp = float(dbp)
        if sbp == 0 or dbp == 0:
            return "-"
        if sbp >= 160 or dbp >= 100:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á"
        elif sbp >= 140 or dbp >= 90:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif sbp < 120 and dbp < 80:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
    except:
        return "-"

def assess_waist(waist):
    try:
        waist = float(waist)
        return "‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if waist > 90 else "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return "-"

# ===============================
# HEADER & FORM
# ===============================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        id_card = st.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    with col2:
        hn = st.text_input("HN")
    with col3:
        full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")

if submitted:
    person = None
    if id_card.strip():
        result = df[df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    elif hn.strip():
        result = df[df["HN"] == hn.strip()]
    elif full_name.strip():
        result = df[df["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]
    else:
        result = pd.DataFrame()

    if result.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        st.session_state["person_data"] = result.iloc[0].to_dict()

# ===============================
# DISPLAY RESULTS
# ===============================
if "person_data" in st.session_state:
    person = st.session_state["person_data"]
    st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á: {person['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•']}")
    st.markdown(f"**HN:** {person['HN']}  \n**‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:** {person['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô']}  \n**‡πÄ‡∏û‡∏®:** {person.get('‡πÄ‡∏û‡∏®', '-')}")

    available_years = sorted(set(
        int(re.search(r'(\d{2})$', col).group(1)) 
        for col in df.columns 
        if re.search(r'‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å\d{2}$', col)
    ), reverse=True)

    year_display = {f"‡∏û.‡∏®. 25{y}": y for y in available_years}
    selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•", list(year_display.keys()))
    selected_year = year_display[selected_label]

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
    weight = person.get(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{selected_year}", "-")
    height = person.get(f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{selected_year}", "-")
    waist = person.get(f"‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß{selected_year}", "-")
    sbp = person.get(f"SBP{selected_year}", "-")
    dbp = person.get(f"DBP{selected_year}", "-")
    pulse = person.get(f"pulse{selected_year}", "-")
    bmi = calc_bmi(weight, height)
    bmi_text = f"{bmi:.1f}" if bmi else "-"

    st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ")
    st.markdown(f"""
    - **‡∏õ‡∏µ ‡∏û.‡∏®.**: 25{selected_year}  
    - **‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:** {weight} ‡∏Å‡∏Å.  
    - **‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:** {height} ‡∏ã‡∏°.  
    - **‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:** {waist} ‡∏ã‡∏°. ({assess_waist(waist)})  
    - **BMI:** {bmi_text} ({interpret_bmi(bmi)})  
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:** {sbp}/{dbp} mmHg ({interpret_bp(sbp, dbp)})  
    - **‡∏ä‡∏µ‡∏û‡∏à‡∏£:** {pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ
    """)

    # ===============================
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö Transpose
    # ===============================
    summary_data = {}
    for y in available_years:
        summary_data[f"25{y}"] = {
            "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)": person.get(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{y}", "-"),
            "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)": person.get(f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{y}", "-"),
            "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)": person.get(f"‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß{y}", "-"),
            "BMI": calc_bmi(person.get(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{y}", "-"), person.get(f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{y}", "-")),
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô": f"{person.get(f'SBP{y}', '-')}/{person.get(f'DBP{y}', '-')}",
            "‡∏ä‡∏µ‡∏û‡∏à‡∏£": person.get(f"pulse{y}", "-")
        }

    summary_df = pd.DataFrame(summary_data)
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)")
    st.dataframe(summary_df)

    # ===============================
    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° BMI (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å + ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°)
    # ===============================
    st.markdown("### üìà BMI Trend Over Years")

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
    available_years_sorted = sorted(available_years)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß
    bmi_values = [
        calc_bmi(person.get(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{y}", "-"), person.get(f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{y}", "-"))
        for y in available_years_sorted
    ]
    years_labels = [f"25{y}" for y in available_years_sorted]

    fig, ax = plt.subplots(figsize=(8, 5))

    # Plot ‡∏Ñ‡πà‡∏≤ BMI
    ax.plot(years_labels, bmi_values, marker='o', linestyle='-', color='blue')

    # ====== ‡πÇ‡∏ã‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö BMI ======
    ax.axhspan(0, 18.5, facecolor='#66ccff', alpha=0.6, label='Underweight')
    ax.axhspan(18.5, 23, facecolor='#66ff66', alpha=0.6, label='Normal')
    ax.axhspan(23, 25, facecolor='#ffff66', alpha=0.6, label='Overweight')
    ax.axhspan(25, 30, facecolor='#ff9933', alpha=0.6, label='Obese')
    ax.axhspan(30, 100, facecolor='#ff6666', alpha=0.6, label='Severely Obese')

    # ====== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏≤‡∏ü ======
    ax.set_title("BMI Trend")
    ax.set_xlabel("Year (B.E.)")
    ax.set_ylabel("BMI")
    ax.set_ylim(bottom=15, top=max(bmi_values + [30]) + 2)
    ax.legend(loc='upper right')

    st.pyplot(fig)


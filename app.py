import streamlit as st
import pandas as pd
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials

# ===============================
# PAGE CONFIG + FONTS
# ===============================
st.set_page_config(page_title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun&display=swap');
    html, body, [class*="css"] {
        font-family: 'Sarabun', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ===============================
# LOAD GOOGLE SHEETS
# ===============================
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
spreadsheet = client.open_by_url(sheet_url)
worksheet = spreadsheet.sheet1
df = pd.DataFrame(worksheet.get_all_records())
df.columns = df.columns.str.strip()
df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str)
df['HN'] = df['HN'].astype(str)
df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str)

# ===============================
# SEARCH UI
# ===============================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

col1, col2, col3 = st.columns(3)
with col1:
    citizen_id = st.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô", max_chars=13, placeholder="‡πÄ‡∏ä‡πà‡∏ô 1234567890123")
with col2:
    hn = st.text_input("HN", placeholder="‡πÄ‡∏ä‡πà‡∏ô 123456")
with col3:
    full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ")

if st.button("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"):
    if not (citizen_id.strip() or hn.strip() or full_name.strip()):
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    else:
        matched = df[
            (df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] == citizen_id.strip()) |
            (df['HN'] == hn.strip()) |
            (df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].str.strip() == full_name.strip())
        ]

        if matched.empty:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        else:
            person = matched.iloc[0]
            st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}")
            st.markdown(f"**HN:** {person.get('HN', '-')}  ")
            st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:** {person.get('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', '-')}")
            st.markdown(f"**‡πÄ‡∏û‡∏®:** {person.get('‡πÄ‡∏û‡∏®', '-')}")

            # ===============================
            # HEALTH SECTION - SELECT YEAR
            # ===============================
            st.markdown("### üóìÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")
            selected_year_display = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ", [f"‡∏û.‡∏®. 25{y}" for y in range(61, 69)])
            selected_year = selected_year_display[-2:]

            def calc_bmi(w, h):
                try:
                    return round(float(w) / ((float(h)/100)**2), 1)
                except:
                    return None

            def interpret_bmi(bmi):
                if bmi is None: return None
                if bmi > 30: return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
                elif bmi >= 25: return "‡∏≠‡πâ‡∏ß‡∏ô"
                elif bmi >= 23: return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
                elif bmi >= 18.5: return "‡∏õ‡∏Å‡∏ï‡∏¥"
                else: return "‡∏ú‡∏≠‡∏°"

            def interpret_bp(sbp, dbp):
                try:
                    sbp = float(sbp)
                    dbp = float(dbp)
                    if sbp == 0 or dbp == 0: return None
                    if sbp >= 160 or dbp >= 100: return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á"
                    elif sbp >= 140 or dbp >= 90: return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
                    elif sbp < 120 and dbp < 80: return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥"
                    else: return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
                except:
                    return None

            def assess_waist(waist):
                try:
                    return "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if float(waist) > 90 else "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥"
                except:
                    return None

            def get_value(field):
                return person.get(f"{field}{selected_year}", "-")

            weight = get_value("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")
            height = get_value("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á")
            waist = get_value("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß")
            sbp = get_value("SBP")
            dbp = get_value("DBP")
            pulse = get_value("pulse")

            bmi = calc_bmi(weight, height)
            bmi_text = f"{bmi:.1f}" if bmi else "-"
            bmi_result = interpret_bmi(bmi)
            bp_text = f"{sbp}/{dbp}" if sbp != "-" and dbp != "-" else "-"
            bp_result = interpret_bp(sbp, dbp)
            waist_result = assess_waist(waist)

            st.markdown("### ü°â ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
            data_summary = pd.DataFrame({
                "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)": [weight],
                "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)": [height],
                "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)": [waist],
                "BMI": [bmi_text],
                "‡πÅ‡∏õ‡∏•‡∏ú‡∏• BMI": [bmi_result or "-"],
                "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)": [bp_text],
                "‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô": [bp_result or "-"],
                "‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß": [waist_result or "-"],
                "‡∏ä‡∏µ‡∏û‡∏à‡∏£ (bpm)": [pulse]
            })
            st.dataframe(data_summary.T.rename(columns={0: selected_year_display}), use_container_width=True)

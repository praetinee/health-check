import streamlit as st
import pandas as pd
import gspread
import json
import matplotlib.pyplot as plt
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun&display=swap');
    html, body, [class*="css"] {
        font-family: 'Sarabun', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ===============================
# CONNECT GOOGLE SHEET
# ===============================
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
worksheet = client.open_by_url(sheet_url).sheet1
df = pd.DataFrame(worksheet.get_all_records())
df.columns = df.columns.str.strip()

# ===============================
# YEAR MAPPING
# ===============================
years = list(range(61, 69))
columns_by_year = {
    year: {
        "weight": f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{year}" if year != 68 else "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "height": f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{year}" if year != 68 else "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "waist": f"‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß{year}" if year != 68 else "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "sbp": f"SBP{year}" if year != 68 else "SBP",
        "dbp": f"DBP{year}" if year != 68 else "DBP",
        "pulse": f"pulse{year}" if year != 68 else "pulse",
        "bmi_value": f"BMI{year}" if year != 68 else "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢",
    }
    for year in years
}

# ===============================
# FUNCTIONS
# ===============================
def interpret_bmi(bmi):
    if bmi is None or bmi == "":
        return "-"
    try:
        bmi = float(bmi)
        if bmi > 30:
            return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
        elif bmi >= 25:
            return "‡∏≠‡πâ‡∏ß‡∏ô"
        elif bmi >= 23:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
        elif bmi >= 18.5:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏ú‡∏≠‡∏°"
    except:
        return "-"

def interpret_waist(waist, height):
    try:
        waist = float(waist)
        height = float(height)
        return "‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if waist > height else "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return "-"

def interpret_bp(sbp, dbp):
    try:
        sbp = float(sbp)
        dbp = float(dbp)
        if sbp == 0 or dbp == 0:
            return "-"
        if sbp >= 160 or dbp >= 100:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á"
        elif sbp >= 140 or dbp >= 90:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif sbp < 120 and dbp < 80:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
    except:
        return "-"

# ===============================
# UI SEARCH
# ===============================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

if submitted:
    query = df.copy()
    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        query = query[query["HN"] == hn.strip()]
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]

    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        st.session_state["person"] = query.iloc[0]

# ===============================
# DISPLAY
# ===============================
if "person" in st.session_state:
    person = st.session_state["person"]
# ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà
    st.success(f"""<span style='font-size: 20px;'>‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á: {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}</span>""", unsafe_allow_html=True)

    st.markdown(f"""
    <h3 style='color: white; margin-top: 0.5rem;'>
    ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: {person.get('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', '-')} &nbsp;&nbsp;&nbsp;&nbsp;
    HN: {person.get('HN', '-')} &nbsp;&nbsp;&nbsp;&nbsp;
    ‡πÄ‡∏û‡∏®: {person.get('‡πÄ‡∏û‡∏®', '-')}
    </h3>
    """, unsafe_allow_html=True)


    selected_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®.", sorted([y + 2500 for y in years], reverse=True))
    year = selected_year - 2500
    cols = columns_by_year.get(year, {})

    weight = person.get(cols["weight"], "")
    height = person.get(cols["height"], "")
    waist = person.get(cols["waist"], "")
    sbp = person.get(cols["sbp"], "")
    dbp = person.get(cols["dbp"], "")
    pulse = person.get(cols["pulse"], "")
    bmi = person.get(cols["bmi_value"], "")

    st.markdown("### üìä ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô")
    st.markdown(pd.DataFrame(table_data).set_index("‡∏õ‡∏µ ‡∏û.‡∏®.").T.to_html(escape=False), unsafe_allow_html=True)


    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
    table_data = {
        "‡∏õ‡∏µ ‡∏û.‡∏®.": [],
        "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)": [],
        "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)": [],
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)": [],
        "BMI (‡πÅ‡∏õ‡∏•‡∏ú‡∏•)": []
    }

    for y in sorted(years):
        cols = columns_by_year[y]
        weight = person.get(cols["weight"], "")
        waist = person.get(cols["waist"], "")
        sbp = person.get(cols["sbp"], "")
        dbp = person.get(cols["dbp"], "")
        bmi = person.get(cols["bmi_value"], "")

        try:
            bmi_str = f"{bmi} ({interpret_bmi(bmi)})" if bmi else "-"
        except:
            bmi_str = "-"

        try:
            if sbp or dbp:
                bp_val = f"{sbp}/{dbp}"
                bp_meaning = interpret_bp(sbp, dbp)
                bp_str = f"{bp_val}<br><span style='font-size: 13px; color: gray;'>{bp_meaning}</span>"
            else:
                bp_str = "-"
        except:
            bp_str = "-"

        table_data["‡∏õ‡∏µ ‡∏û.‡∏®."].append(y + 2500)
        table_data["‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)"].append(weight if weight else "-")
        table_data["‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)"].append(waist if waist else "-")
        table_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)"].append(bp_str)
        table_data["BMI (‡πÅ‡∏õ‡∏•‡∏ú‡∏•)"].append(bmi_str)

    st.dataframe(pd.DataFrame(table_data).set_index("‡∏õ‡∏µ ‡∏û.‡∏®.").T)

    bmi_data = []
    labels = []

    for y in sorted(years):
        col = columns_by_year[y]
        try:
            bmi_val = float(person.get(col["bmi_value"], 0))
            if bmi_val > 0:
                bmi_data.append(bmi_val)
                labels.append(f"B.E. {y + 2500}")
        except:
            continue
    
# ==========================
# GRAPH: BMI History
# ==========================

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡πÅ‡∏•‡∏∞ labels
bmi_data = []
labels = []

for y in sorted(years):
    col = columns_by_year[y]
    try:
        bmi_val = float(person.get(col["bmi_value"], 0))
        if bmi_val > 0:
            bmi_data.append(bmi_val)
            labels.append(f"B.E. {y + 2500}")
    except:
        continue

# ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if bmi_data and labels:
    st.markdown("### üìà BMI Trend")
    fig, ax = plt.subplots(figsize=(10, 4))

    # ‡πÇ‡∏ã‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤ BMI
    ax.axhspan(0, 18.5, facecolor='#D0E6F7', alpha=0.4, label='Underweight')
    ax.axhspan(18.5, 23, facecolor='#B7F7C6', alpha=0.4, label='Normal')
    ax.axhspan(23, 25, facecolor='#FFFACD', alpha=0.4, label='Overweight')
    ax.axhspan(25, 30, facecolor='#FFD580', alpha=0.4, label='Obese')
    ax.axhspan(30, 40, facecolor='#FFA07A', alpha=0.4, label='Severely Obese')

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü BMI
    ax.plot(np.arange(len(labels)), bmi_data, marker='o', color='black', label="BMI")

    # ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    ax.set_xticks(np.arange(len(labels)))
    ax.set_xticklabels(labels)
    ax.set_ylabel("BMI")
    ax.set_ylim(15, 40)
    ax.set_title("BMI Over Time")
    ax.legend(loc="upper left")

    st.pyplot(fig)
else:
    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
